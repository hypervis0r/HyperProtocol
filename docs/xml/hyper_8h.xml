<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="hyper_8h" kind="file" language="C++">
    <compoundname>hyper.h</compoundname>
    <includes refid="hyper__network_8h" local="no">hyper/hyper_network.h</includes>
    <includes refid="hyper__file_8h" local="no">hyper/hyper_file.h</includes>
    <includedby refid="hyper__file_8h" local="no">include/hyper/hyper_file.h</includedby>
    <includedby refid="hyper__network_8h" local="no">include/hyper/hyper_network.h</includedby>
    <incdepgraph>
      <node id="9">
        <label>sys/stat.h</label>
      </node>
      <node id="4">
        <label>arpa/inet.h</label>
      </node>
      <node id="2">
        <label>hyper/hyper_network.h</label>
        <link refid="hyper__network_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>stdlib.h</label>
      </node>
      <node id="6">
        <label>errno.h</label>
      </node>
      <node id="10">
        <label>fcntl.h</label>
      </node>
      <node id="7">
        <label>string.h</label>
      </node>
      <node id="5">
        <label>unistd.h</label>
      </node>
      <node id="1">
        <label>include/hyper.h</label>
        <link refid="hyper_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>sys/socket.h</label>
      </node>
      <node id="8">
        <label>hyper/hyper_file.h</label>
        <link refid="hyper__file_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>include/hyper/hyper_network.h</label>
        <link refid="hyper__network_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="1" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/hyper.h</label>
        <link refid="hyper_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>include/hyper/hyper_file.h</label>
        <link refid="hyper__file_8h"/>
        <childnode refid="1" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="hyper_8h_1af1abcb51a4aa27a5a5a7958c03448134" prot="public" static="no">
        <name>MAX_COMMAND_LENGTH</name>
        <initializer>1024</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/hyper.h" line="12" column="9" bodyfile="include/hyper.h" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hyper_8h_1a20e1c88c93d2dde7ffb527c77b5b9c04" prot="public" static="no">
        <name>HYPER_SUCCESS</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/hyper.h" line="14" column="9" bodyfile="include/hyper.h" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hyper_8h_1ac2c05617bb7480f9a4ece2206a447ba1" prot="public" static="no">
        <name>HYPER_FAILED</name>
        <initializer>-1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/hyper.h" line="15" column="9" bodyfile="include/hyper.h" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hyper_8h_1a23c954117daf24d0c81ca9159a9332d6" prot="public" static="no">
        <name>HYPER_BAD_PARAMETER</name>
        <initializer>-2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/hyper.h" line="16" column="9" bodyfile="include/hyper.h" bodystart="16" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="hyper_8h_1aed41b8c9a608cb2b980c6ff6552fb50c" prot="public" static="no">
        <type>int</type>
        <definition>typedef int HYPERSTATUS</definition>
        <argsstring></argsstring>
        <name>HYPERSTATUS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/hyper.h" line="18" column="17" bodyfile="include/hyper.h" bodystart="18" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="hyper_8h_1afe26c2fdb54f774335b134b96867a1f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HYPERSTATUS</type>
        <definition>HYPERSTATUS HyperMemAlloc</definition>
        <argsstring>(void **src, size_t size)</argsstring>
        <name>HyperMemAlloc</name>
        <param>
          <type>void **</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Allocate memory in a platform-agnostic way. </para>
        </briefdescription>
        <detaileddescription>
<para>Allocate memory in a platform-agnostic way. We use HeapAlloc for Windows, and malloc for POSIX. We do this instead of malloc for Windows, as it reduces overhead.</para>
<para><simplesect kind="warning"><para>Objects allocated with HyperMemAlloc must be freed with HyperMemFree</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">src</parametername>
</parameternamelist>
<parameterdescription>
<para>The memory area to allocate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>The amount of bytes to allocate</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns HYPER_SUCCESS on success. If memory allocation fails, returns HYPER_FAILED.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="hyper_8h_1acaea6c6f46a0104505bd182449226445" kindref="member">HyperMemFree</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="hyper_8h_1a8a220d180abc76e00b39dae5975cce43" kindref="member">HyperMemRealloc</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/hyper.h" line="42" column="1" declfile="include/hyper.h" declline="42" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="hyper_8h_1acaea6c6f46a0104505bd182449226445" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HYPERSTATUS</type>
        <definition>HYPERSTATUS HyperMemFree</definition>
        <argsstring>(void *src)</argsstring>
        <name>HyperMemFree</name>
        <param>
          <type>void *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Free memory in a platform-agnostic way. </para>
        </briefdescription>
        <detaileddescription>
<para>Free memory in a platform-agnostic way. We use HeapFree for Windows, and free for POSIX. We do this instead of free for Windows, as calling free on a HeapAlloc-allocated function causes heap corruption.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">src</parametername>
</parameternamelist>
<parameterdescription>
<para>The memory area to free</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns HYPER_SUCCESS on success. If freeing memory fails, returns HYPER_FAILED.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="hyper_8h_1afe26c2fdb54f774335b134b96867a1f2" kindref="member">HyperMemAlloc</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="hyper_8h_1a8a220d180abc76e00b39dae5975cce43" kindref="member">HyperMemRealloc</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/hyper.h" line="64" column="1" declfile="include/hyper.h" declline="64" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="hyper_8h_1a8a220d180abc76e00b39dae5975cce43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HYPERSTATUS</type>
        <definition>HYPERSTATUS HyperMemRealloc</definition>
        <argsstring>(void **src, size_t size)</argsstring>
        <name>HyperMemRealloc</name>
        <param>
          <type>void **</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Reallocate memory in a platform-agnostic way. </para>
        </briefdescription>
        <detaileddescription>
<para>Reallocate memory in a platform-agnostic way. We use HeapReAlloc for Windows, and realloc for POSIX. We do this instead of realloc for Windows, as it reduces overhead.</para>
<para><simplesect kind="warning"><para>Objects reallocated with HyperMemRealloc must be freed with HyperMemFree</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">src</parametername>
</parameternamelist>
<parameterdescription>
<para>The memory area to reallocate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size to reallocate memory to</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns HYPER_SUCCESS on success. If reallocating memory fails, returns HYPER_FAILED.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="hyper_8h_1afe26c2fdb54f774335b134b96867a1f2" kindref="member">HyperMemAlloc</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="hyper_8h_1acaea6c6f46a0104505bd182449226445" kindref="member">HyperMemFree</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/hyper.h" line="87" column="1" declfile="include/hyper.h" declline="87" declcolumn="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Main library header with common functions and variables. </para>
    </briefdescription>
    <detaileddescription>
<para>The <ref refid="hyper_8h" kindref="compound">hyper.h</ref> header includes common functions and variables, such as memory management functions and status codes. It also serves as a main header file for including the rest of the HyperProtocol library. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="9"><highlight class="preprocessor">#ifndef<sp/>_HYPER_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_HYPER_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_COMMAND_LENGTH<sp/><sp/><sp/><sp/><sp/><sp/>1024</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HYPER_SUCCESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HYPER_FAILED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HYPER_BAD_PARAMETER<sp/><sp/><sp/><sp/>-2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>HYPERSTATUS;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="hyper__network_8h" kindref="compound">hyper/hyper_network.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="hyper__file_8h" kindref="compound">hyper/hyper_file.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal">HYPERSTATUS</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><ref refid="hyper_8h_1afe26c2fdb54f774335b134b96867a1f2" kindref="member">HyperMemAlloc</ref>(</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**src,</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size</highlight></codeline>
<codeline lineno="45"><highlight class="normal">);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal">HYPERSTATUS</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><ref refid="hyper_8h_1acaea6c6f46a0104505bd182449226445" kindref="member">HyperMemFree</ref>(</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*src</highlight></codeline>
<codeline lineno="66"><highlight class="normal">);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal">HYPERSTATUS</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><ref refid="hyper_8h_1a8a220d180abc76e00b39dae5975cce43" kindref="member">HyperMemRealloc</ref>(</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**src,</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size</highlight></codeline>
<codeline lineno="90"><highlight class="normal">);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="include/hyper.h"/>
  </compounddef>
</doxygen>
