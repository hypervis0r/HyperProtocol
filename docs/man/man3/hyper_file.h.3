.TH "include/hyper/hyper_file.h" 3 "Wed Dec 9 2020" "HyperProtocol" \" -*- nroff -*-
.ad l
.nh
.SH NAME
include/hyper/hyper_file.h \- Contains all file I/O functions\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <sys/stat\&.h>\fP
.br
\fC#include <fcntl\&.h>\fP
.br
\fC#include <unistd\&.h>\fP
.br
\fC#include <hyper\&.h>\fP
.br
\fC#include <hyper/hyper_network\&.h>\fP
.br
\fC#include <string\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <stdio\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBREADALL_CHUNK\fP   262144"
.br
.ti -1c
.RI "#define \fBREADALL_OK\fP   0  /* Success */"
.br
.ti -1c
.RI "#define \fBREADALL_INVALID\fP   \-1  /* Invalid parameters */"
.br
.ti -1c
.RI "#define \fBREADALL_ERROR\fP   \-2  /* Stream error */"
.br
.ti -1c
.RI "#define \fBREADALL_TOOMUCH\fP   \-3  /* Too much input */"
.br
.ti -1c
.RI "#define \fBREADALL_NOMEM\fP   \-4  /* Out of memory */"
.br
.ti -1c
.RI "#define \fBSEND_BLOCK_SIZE\fP   4096"
.br
.ti -1c
.RI "#define \fBRECV_BLOCK_SIZE\fP   4096"
.br
.ti -1c
.RI "#define \fBFILESIZE_BUFFER_SIZE\fP   1024"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef void * \fBHYPERFILE\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "HYPERSTATUS \fBHyperReadFileC\fP (FILE *in, HYPERFILE *dataptr, size_t *sizeptr)"
.br
.RI "Read file into HYPERFILE buffer using standard C\&. "
.ti -1c
.RI "HYPERSTATUS \fBHyperReadFile\fP (const char *cpFilePath, HYPERFILE *lpBuffer, size_t *lpFileSize)"
.br
.RI "Read file into HYPERFILE buffer using platform-specifics\&. "
.ti -1c
.RI "HYPERSTATUS \fBHyperWriteFileC\fP (FILE *pFile, const HYPERFILE hfBuffer, const size_t stFileSize)"
.br
.RI "Write file from HYPERFILE buffer to disk using standard C\&. "
.ti -1c
.RI "HYPERSTATUS \fBHyperWriteFile\fP (const char *cpFilePath, const HYPERFILE hfBuffer, const size_t stFileSize)"
.br
.RI "Write file from HYPERFILE buffer to disk using platform-specifics\&. "
.ti -1c
.RI "HYPERSTATUS \fBHyperReceiveFile\fP (const SOCKET sockServer, HYPERFILE *lpBuffer, unsigned long *ulSize)"
.br
.RI "Receive file from network into HYPERFILE buffer\&. "
.ti -1c
.RI "HYPERSTATUS \fBHyperSendFile\fP (const SOCKET sockServer, HYPERFILE *lpBuffer, const unsigned long ulSize)"
.br
.RI "Send file from HYPERFILE buffer over network\&. "
.in -1c
.SH "Detailed Description"
.PP 
Contains all file I/O functions\&. 


.PP
Definition in file \fBhyper_file\&.h\fP\&.
.SH "Function Documentation"
.PP 
.SS "HYPERSTATUS HyperReadFile (const char * cpFilePath, HYPERFILE * lpBuffer, size_t * lpFileSize)"

.PP
Read file into HYPERFILE buffer using platform-specifics\&. Reads a file from a file path into a HYPERFILE buffer\&. Uses platform-specific file I/O functions for faster speed\&.
.PP
\fBParameters\fP
.RS 4
\fIcpFilePath\fP char pointer to file path on disk 
.br
\fIlpBuffer\fP Pointer to a NULL HYPERFILE buffer that holds the file 
.br
\fIlpFileSize\fP Pointer to a size_t that holds the file size
.RE
.PP
\fBReturns\fP
.RS 4
Returns HYPER_SUCCESS if successful\&. If something fails, returns HYPER_FAILED\&. 
.RE
.PP

.SS "HYPERSTATUS HyperReadFileC (FILE * in, HYPERFILE * dataptr, size_t * sizeptr)"

.PP
Read file into HYPERFILE buffer using standard C\&. Reads a file from a FILE pointer into a HYPERFILE buffer\&. Uses Standard C for platform-agnostic file I/O\&.
.PP
\fBParameters\fP
.RS 4
\fIin\fP FILE pointer to an open file 
.br
\fIdataptr\fP Pointer to a NULL HYPERFILE buffer that holds the file 
.br
\fIsizeptr\fP Pointer to a size_t that holds the file size
.RE
.PP
\fBReturns\fP
.RS 4
Returns HYPER_SUCCESS if successful\&. If something fails, returns HYPER_FAILED\&. 
.RE
.PP

.SS "HYPERSTATUS HyperReceiveFile (const SOCKET sockServer, HYPERFILE * lpBuffer, unsigned long * ulSize)"

.PP
Receive file from network into HYPERFILE buffer\&. Recieves a file from a connected socket, and writes it into a HYPERFILE buffer\&.
.PP
\fBParameters\fP
.RS 4
\fIsockServer\fP Open, connected socket to receive from 
.br
\fIlpBuffer\fP HYPERFILE buffer to write data to 
.br
\fIstFileSize\fP size_t to write file size to
.RE
.PP
\fBReturns\fP
.RS 4
Returns HYPER_SUCCESS if successful\&. If something fails, returns HYPER_FAILED\&. 
.RE
.PP

.SS "HYPERSTATUS HyperSendFile (const SOCKET sockServer, HYPERFILE * lpBuffer, const unsigned long ulSize)"

.PP
Send file from HYPERFILE buffer over network\&. Sends a file stored in a HYPERFILE buffer over the network to a connected socket\&.
.PP
\fBParameters\fP
.RS 4
\fIsockServer\fP Open, connected socket to send to 
.br
\fI[in/out]\fP lpBuffer HYPERFILE buffer to write data to 
.br
\fIstFileSize\fP size_t to write file size to
.RE
.PP
\fBReturns\fP
.RS 4
Returns HYPER_SUCCESS if successful\&. If something fails, returns HYPER_FAILED\&.
.RE
.PP
\fBRemarks\fP
.RS 4
lpBuffer is reallocated to (ulSize + SEND_BLOCK_SIZE) 
.RE
.PP

.SS "HYPERSTATUS HyperWriteFile (const char * cpFilePath, const HYPERFILE hfBuffer, const size_t stFileSize)"

.PP
Write file from HYPERFILE buffer to disk using platform-specifics\&. Writes a file from a HYPERFILE buffer to disk\&. Uses platform-specific file I/O for faster speeds\&.
.PP
\fBParameters\fP
.RS 4
\fIcpFilePath\fP File path to write file to 
.br
 
.br
\fIhfBuffer\fP HYPERFILE buffer thats holding file data 
.br
\fIstFileSize\fP size_t that holds the file size
.RE
.PP
\fBReturns\fP
.RS 4
Returns HYPER_SUCCESS if successful\&. If something fails, returns HYPER_FAILED\&. 
.RE
.PP

.SS "HYPERSTATUS HyperWriteFileC (FILE * pFile, const HYPERFILE hfBuffer, const size_t stFileSize)"

.PP
Write file from HYPERFILE buffer to disk using standard C\&. Writes a file from a HYPERFILE buffer to disk\&. Uses Standard C for platform-agnostic file I/O\&.
.PP
\fBParameters\fP
.RS 4
\fI[in/out]\fP in FILE pointer to an open file 
.br
\fIhfBuffer\fP HYPERFILE buffer thats holding file data 
.br
\fIstFileSize\fP size_t that holds the file size
.RE
.PP
\fBReturns\fP
.RS 4
Returns HYPER_SUCCESS if successful\&. If something fails, returns HYPER_FAILED\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for HyperProtocol from the source code\&.
