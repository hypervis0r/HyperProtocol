.TH "include/hyper/hyper_network.h" 3 "Wed Dec 9 2020" "HyperProtocol" \" -*- nroff -*-
.ad l
.nh
.SH NAME
include/hyper/hyper_network.h \- Contains Hyper Networking functions and definitions\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <sys/socket\&.h>\fP
.br
\fC#include <arpa/inet\&.h>\fP
.br
\fC#include <unistd\&.h>\fP
.br
\fC#include <errno\&.h>\fP
.br
\fC#include <hyper\&.h>\fP
.br
\fC#include <string\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBCONNECTION_CLOSED\fP   0"
.br
.ti -1c
.RI "#define \fBINVALID_SOCKET\fP   \-1"
.br
.ti -1c
.RI "#define \fBSOCKET_ERROR\fP   \-1"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef int \fBSOCKET\fP"
.br
.ti -1c
.RI "typedef struct sockaddr_in \fBSOCKADDR_IN\fP"
.br
.ti -1c
.RI "typedef struct sockaddr \fBSOCKADDR\fP"
.br
.ti -1c
.RI "typedef socklen_t \fBSOCKLEN\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "HYPERSTATUS \fBHyperNetworkInit\fP (void)"
.br
.RI "Initializes the Hyper Network functions\&. "
.ti -1c
.RI "HYPERSTATUS \fBHyperCloseSocket\fP (SOCKET sock)"
.br
.RI "Closes a SOCKET object\&. "
.ti -1c
.RI "HYPERSTATUS \fBHyperSocketCleanup\fP (void)"
.br
.RI "Cleans up Hyper Network functions for exiting\&. "
.ti -1c
.RI "HYPERSTATUS \fBHyperSocket\fP (SOCKET *sock)"
.br
.RI "Creates a valid SOCKET object for use with Hyper Networking\&. "
.ti -1c
.RI "HYPERSTATUS \fBHyperConnectServer\fP (SOCKET *sock, const char *cpServerIP, const unsigned short usPort)"
.br
.RI "Connects to an open Hyper Server\&. "
.ti -1c
.RI "HYPERSTATUS \fBHyperStartServer\fP (SOCKET *sock, const unsigned short usPort)"
.br
.RI "Starts a Hyper Server at specified port\&. "
.ti -1c
.RI "HYPERSTATUS \fBHyperServerListen\fP (const SOCKET sockServer, SOCKET *sockClient)"
.br
.RI "Listens for connections to the server\&. "
.ti -1c
.RI "HYPERSTATUS \fBHyperReceiveCommand\fP (const SOCKET sock, char *cpCommand, size_t stMaxCommandLength)"
.br
.RI "Recieve command from connection\&. "
.ti -1c
.RI "HYPERSTATUS \fBHyperSendCommand\fP (const SOCKET sock, const char *cpCommand)"
.br
.RI "Send command to connection\&. "
.ti -1c
.RI "HYPERSTATUS \fBHyperSendStatus\fP (const SOCKET sock, const unsigned short status)"
.br
.RI "Send Status Response to connection\&. "
.ti -1c
.RI "HYPERSTATUS \fBHyperReceiveStatus\fP (const SOCKET sock, unsigned short *status)"
.br
.RI "Receive Status Response from connection\&. "
.in -1c
.SH "Detailed Description"
.PP 
Contains Hyper Networking functions and definitions\&. 


.PP
Definition in file \fBhyper_network\&.h\fP\&.
.SH "Function Documentation"
.PP 
.SS "HYPERSTATUS HyperCloseSocket (SOCKET sock)"

.PP
Closes a SOCKET object\&. Closes a SOCKET object\&.
.PP
\fBParameters\fP
.RS 4
\fIsock\fP Socket to close
.RE
.PP
\fBReturns\fP
.RS 4
Returns HYPER_SUCCESS if successful, else returns HYPER_FAILED
.RE
.PP
\fBSee also\fP
.RS 4
\fBHyperSocket\fP 
.RE
.PP

.SS "HYPERSTATUS HyperConnectServer (SOCKET * sock, const char * cpServerIP, const unsigned short usPort)"

.PP
Connects to an open Hyper Server\&. Connects to an open Hyper Server using the specified server IP and port\&.
.PP
\fBParameters\fP
.RS 4
\fIsock\fP Pointer to SOCKET object to connect with 
.br
\fIcpServerIP\fP Char pointer containing IP address of server 
.br
\fIusPort\fP Unsigned port number of server
.RE
.PP
\fBReturns\fP
.RS 4
Returns HYPER_SUCCESS if successful, else returns HYPER_FAILED
.RE
.PP
\fBSee also\fP
.RS 4
\fBHyperStartServer\fP 
.RE
.PP

.SS "HYPERSTATUS HyperNetworkInit (void)"

.PP
Initializes the Hyper Network functions\&. Initializes the Hyper Network functions so networking works properly\&.
.PP
\fBReturns\fP
.RS 4
Returns HYPER_SUCCESS if successful, else returns HYPER_FAILED
.RE
.PP
\fBRemarks\fP
.RS 4
As of right now, this is only needed for Windows applications\&. However, this could change, so it is advised to use this function anyways\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBHyperSocketCleanup\fP 
.RE
.PP

.SS "HYPERSTATUS HyperReceiveCommand (const SOCKET sock, char * cpCommand, size_t stMaxCommandLength)"

.PP
Recieve command from connection\&. Recieves a command sent from connected peer\&.
.PP
\fBParameters\fP
.RS 4
\fIsock\fP SOCKET object to receive from 
.br
\fIcpCommand\fP Char pointer buffer to write command to 
.br
\fIstMaxCommandLength\fP Max buffer size for cpCommand
.RE
.PP
\fBReturns\fP
.RS 4
Returns HYPER_SUCCESS if successful, else returns HYPER_FAILED
.RE
.PP
\fBSee also\fP
.RS 4
\fBHyperSendCommand\fP 
.PP
\fBHyperSendStatus\fP 
.PP
\fBHyperReceiveStatus\fP 
.RE
.PP

.SS "HYPERSTATUS HyperReceiveStatus (const SOCKET sock, unsigned short * status)"

.PP
Receive Status Response from connection\&. Receives a Status Response Code from a connected peer\&.
.PP
\fBParameters\fP
.RS 4
\fIsock\fP SOCKET object to receive from 
.br
\fIstatus\fP Pointer to unsigned short to store status in
.RE
.PP
\fBReturns\fP
.RS 4
Returns HYPER_SUCCESS if successful, else returns HYPER_FAILED
.RE
.PP
\fBSee also\fP
.RS 4
\fBHyperSendStatus\fP 
.PP
\fBHyperSendCommand\fP 
.PP
\fBHyperReceiveCommand\fP 
.RE
.PP

.SS "HYPERSTATUS HyperSendCommand (const SOCKET sock, const char * cpCommand)"

.PP
Send command to connection\&. Sends a command to connected peer\&.
.PP
\fBParameters\fP
.RS 4
\fIsock\fP SOCKET object to send to 
.br
\fIcpCommand\fP Char pointer buffer storing command to send
.RE
.PP
\fBReturns\fP
.RS 4
Returns HYPER_SUCCESS if successful, else returns HYPER_FAILED
.RE
.PP
\fBSee also\fP
.RS 4
\fBHyperReceiveCommand\fP 
.PP
\fBHyperSendStatus\fP 
.PP
\fBHyperReceiveStatus\fP 
.RE
.PP

.SS "HYPERSTATUS HyperSendStatus (const SOCKET sock, const unsigned short status)"

.PP
Send Status Response to connection\&. Sends a Status Response Code to connected peer\&.
.PP
\fBParameters\fP
.RS 4
\fIsock\fP SOCKET object to send to 
.br
\fIstatus\fP unsigned short storing status to send
.RE
.PP
\fBReturns\fP
.RS 4
Returns HYPER_SUCCESS if successful, else returns HYPER_FAILED
.RE
.PP
\fBSee also\fP
.RS 4
\fBHyperReceiveStatus\fP 
.PP
\fBHyperSendCommand\fP 
.PP
\fBHyperReceiveCommand\fP 
.RE
.PP

.SS "HYPERSTATUS HyperServerListen (const SOCKET sockServer, SOCKET * sockClient)"

.PP
Listens for connections to the server\&. Listens for incoming connections to the server\&. Blocks thread until connection is received\&.
.PP
\fBParameters\fP
.RS 4
\fIsockServer\fP SOCKET object to server 
.br
\fIsockClient\fP Pointer to SOCKET object used to store the connected client
.RE
.PP
\fBReturns\fP
.RS 4
Returns HYPER_SUCCESS if successful, else returns HYPER_FAILED
.RE
.PP
\fBSee also\fP
.RS 4
\fBHyperStartServer\fP 
.RE
.PP

.SS "HYPERSTATUS HyperSocket (SOCKET * sock)"

.PP
Creates a valid SOCKET object for use with Hyper Networking\&. Creates a valid SOCKET object for use with Hyper Networking functions\&. Must be connected using either connect() or accept()/listen()\&.
.PP
\fBParameters\fP
.RS 4
\fIsock\fP Pointer to SOCKET object to write socket into
.RE
.PP
\fBReturns\fP
.RS 4
Returns HYPER_SUCCESS if successful, else returns HYPER_FAILED
.RE
.PP
\fBSee also\fP
.RS 4
\fBHyperCloseSocket\fP 
.RE
.PP

.SS "HYPERSTATUS HyperSocketCleanup (void)"

.PP
Cleans up Hyper Network functions for exiting\&. Cleans up Hyper Network functions\&. Once this function is called, networking will no longer be successful, so it should only be called when finished with networking\&.
.PP
\fBReturns\fP
.RS 4
Returns HYPER_SUCCESS if successful, else returns HYPER_FAILED
.RE
.PP
\fBRemarks\fP
.RS 4
As of right now, this is only needed for Windows applications\&. However, this could change, so it is advised to use this function anyways\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBHyperNetworkInit\fP 
.RE
.PP

.SS "HYPERSTATUS HyperStartServer (SOCKET * sock, const unsigned short usPort)"

.PP
Starts a Hyper Server at specified port\&. Starts and initializes a Hyper Server at the specified port\&.
.PP
\fBParameters\fP
.RS 4
\fIsock\fP Pointer to SOCKET object to use for connections 
.br
\fIusPort\fP Unsigned port number to bind to
.RE
.PP
\fBReturns\fP
.RS 4
Returns HYPER_SUCCESS if successful, else returns HYPER_FAILED
.RE
.PP
\fBSee also\fP
.RS 4
\fBHyperConnectServer\fP 
.PP
\fBHyperServerListen\fP 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for HyperProtocol from the source code\&.
